package Week_02

import "sort"


// 题目的要求是找出第n个丑数
//   1. 确定是否是丑数
//        1）质因数分解，统计是不是2,3,5的组合？
//        2) 丑数 乘 丑数，肯定是丑数
//            从1，2，3，4，5 开始,排列组合进行计算，比较大小放入数组
//               边界怎么确定？比较大小，将小的放入数组，直到n结束。
//               如何进行组合？丑数数组，从下标0位置开始，x2, x3, x5, 选个最小的
//               [1] => [1, 2]                               确定第二个丑数,  1x2,   1x3,  1x5, 取最小, 取2 
//               [1, 2] => [1, 2, 3]                         确定第三个丑数, (1x2),  1x3,  1x5,   2x2,  2x3,  2x5, 取不在数组最小, 取3
//               [1, 2, 3] => [1, 2, 3, 4]                   确定第四个丑数,        (1x3), 1x5,   2x2,  2x3,  2x5, 3x2, 3x3, 3x5, 取不在数组中的最小, 取4
//               [1, 2, 3, 4] => [1, 2, 3, 4, 5]             确定第五个丑数,               1x5,  (2x2), 2x3,  2x5, 3x2, 3x3, 3x5, 4x2, 4x3, 4x5 取不在数组中的最小, 取5
//               [1, 2, 3, 4, 5] => [1, 2, 3, 4, 5, 6]       确定第六个丑数,              (1x5), (2x2), 2x3,  2x5, 3x2, 3x3, 3x5, 4x2, 4x3, 4x5, 5x2, 5x3, 5x5 取不在数组中的最小, 取6
//               [1, 2, 3, 4, 5, 6] => [1, 2, 3, 4, 5, 6, 8] 确定第七个丑数,                           (2x3), 2x5, 3x2, 3x3, 3x5, 4x2, 4x3, 4x5, 5x2, 5x3, 5x5, 6x2, 6x3, 6x5 取不在数组中的最小, 取8
//               组合计算时，有些重复计算，如何减少重复计算？
//                  数组中存在的每个丑数乘2，与最后一个丑数比较，如果大于，再与乘3，乘5的进行比较, 取最小(非最优解)
//        3) 素数肯定不是丑数，素数与任何2,3,5组合相乘都不是丑数。但通过素数进行判断，也需要质因数分解
//   2. 确定是不是第n个
//        1) 找出丑数进行数组排序，通过数组下标找第n个
//        2) 插入大顶堆，看堆的元素个数，如果等于n,则堆顶元素是目标结果

func nthUglyNumber(n int) int{

	if n < 1 {
		return 0
	}

	ans := []int{1}
	var u2, u3, u5 int

	for len(ans) < n {
    	for i := 0; i < len(ans); i++ {
    		if ans[i] * 2 > ans[len(ans)-1] {
    			u2 = ans[i] * 2 
    			break;
    		}
    	}
    
    	for i := 0; i < len(ans); i++ {
    		if ans[i] * 3 > ans[len(ans)-1] {
    			u3 = ans[i] * 3 
    			break;
    		}
    	}
    
    	for i := 0; i < len(ans); i++ {
    		if ans[i] * 5 > ans[len(ans)-1] {
    			u5 = ans[i] * 5 
    			break;
    		}
    	}
    
    	num := min(u2, u3, u5)
		ans = append(ans, num)
    }
	return ans[n-1]
}

func min(nums ... int ) int {
	sort.Ints(nums)
	return nums[0]
}